#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void generateMatrix(int** matrix, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = i; j < size; j++) {
            if (i == j) {
                matrix[i][j] = 0;
            }
            else {
                matrix[i][j] = matrix[j][i] = rand() % 2;
            }
        }
    }
}

void printMatrix(int** matrix, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
}

void mergeVertices(int** matrix, int size, int v1, int v2) {
    if (v1 >= size || v2 >= size || v1 < 0 || v2 < 0) {
        printf("Ошибка: некорректные номера вершин\n");
        return;
    }
    for (int i = 0; i < size; i++) {
        if (i != v1 && i != v2) {
            matrix[v1][i] = matrix[v1][i] || matrix[v2][i];
            matrix[i][v1] = matrix[i][v1] || matrix[i][v2];
        }
    }
    for (int i = 0; i < size; i++) {
        matrix[v2][i] = 0;
        matrix[i][v2] = 0;
    }
}

void contractEdge(int** matrix, int size, int v1, int v2) {
    mergeVertices(matrix, size, v1, v2);
}

void splitVertex(int** matrix, int size, int v, int new_v) {
    if (v >= size || new_v >= size || v < 0 || new_v < 0) {
        printf("Ошибка: некорректные номера вершин\n");
        return;
    }
    for (int i = 0; i < size; i++) {
        if (matrix[v][i] == 1 && i != new_v) {
            matrix[new_v][i] = matrix[v][i];
            matrix[i][new_v] = matrix[i][v];
        }
    }
    matrix[v][new_v] = 1;
    matrix[new_v][v] = 1;
}

void unionGraphs(int** G, int** G1, int** G2, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            G[i][j] = G1[i][j] || G2[i][j];
        }
    }
}

void intersectGraphs(int** G, int** G1, int** G2, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            G[i][j] = G1[i][j] && G2[i][j];
        }
    }
}

void ringSumGraphs(int** G, int** G1, int** G2, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            G[i][j] = G1[i][j] ^ G2[i][j];
        }
    }
}

int main() {
    srand(time(0));  // Инициализация генератора случайных чисел

    int size;
    printf("Введите размер матрицы: ");
    scanf("%d", &size);

    if (size <= 0) {
        printf("Ошибка: размер матрицы должен быть положительным\n");
        return 1;
    }

    // Динамическое выделение памяти для матриц
    int** M1 = (int**)malloc(size * sizeof(int*));
    int** M2 = (int**)malloc(size * sizeof(int*));
    int** G = (int**)malloc(size * sizeof(int*));
    for (int i = 0; i < size; i++) {
        M1[i] = (int*)malloc(size * sizeof(int));
        M2[i] = (int*)malloc(size * sizeof(int));
        G[i] = (int*)malloc(size * sizeof(int));
    }

    generateMatrix(M1, size);
    generateMatrix(M2, size);

    printf("Матрица М1:\n");
    printMatrix(M1, size);

    printf("\nМатрица М2:\n");
    printMatrix(M2, size);

    // Операции с графами
    int v1, v2, new_v;

    // Объединение вершин
    printf("\nВведите две вершины для объединения (v1 v2): ");
    if (scanf("%d %d", &v1, &v2) != 2 || v1 >= size || v2 >= size || v1 < 0 || v2 < 0) {
        printf("Ошибка: некорректные номера вершин\n");
        return 1;
    }
    mergeVertices(M1, size, v1, v2);
    printf("\nМатрица М1 после объединения вершин %d и %d:\n", v1, v2);
    printMatrix(M1, size);

    // Стягивание ребра
    printf("\nВведите две вершины для стягивания ребра (v1 v2): ");
    if (scanf("%d %d", &v1, &v2) != 2 || v1 >= size || v2 >= size || v1 < 0 || v2 < 0) {
        printf("Ошибка: некорректные номера вершин\n");
        return 1;
    }
    contractEdge(M2, size, v1, v2);
    printf("\nМатрица М2 после стягивания ребра между %d и %d:\n", v1, v2);
    printMatrix(M2, size);

    // Расщепление вершины
    printf("\nВведите вершину для расщепления и новую вершину (v new_v): ");
    if (scanf("%d %d", &v1, &new_v) != 2 || v1 >= size || new_v >= size || v1 < 0 || new_v < 0) {
        printf("Ошибка: некорректные номера вершин\n");
        return 1;
    }
    splitVertex(M1, size, v1, new_v);
    printf("\nМатрица М1 после расщепления вершины %d в %d:\n", v1, new_v);
    printMatrix(M1, size);

    // Объединение графов
    unionGraphs(G, M1, M2, size);
    printf("\nОбъединение G = G1 ∪ G2:\n");
    printMatrix(G, size);

    // Пересечение графов
    intersectGraphs(G, M1, M2, size);
    printf("\nПересечение G = G1 ∩ G2:\n");
    printMatrix(G, size);

    // Кольцевая сумма графов
    ringSumGraphs(G, M1, M2, size);
    printf("\nКольцевая сумма G = G1 ⊕ G2:\n");
    printMatrix(G, size);

    // Освобождение памяти
    for (int i = 0; i < size; i++) {
        free(M1[i]);
        free(M2[i]);
        free(G[i]);
    }
    free(M1);
    free(M2);
    free(G);

    return 0;
}
